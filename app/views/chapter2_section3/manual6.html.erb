  <div class="span4">
    <%= render 'layouts/navbar2' %>
  </div>
  <div class="span8">
  	<h1 id="mind"><a name="mind" href="#mind"></a>基礎問題</h1>

  	<hr class="page">

  	<p>
	<b>・ウェブ解析はどんな手法？</b><br>
	※文章穴埋め<br>
	<b>・どんなツールを使えば良いのか？</b><br><br>

	<b>・CVRとは？</b><br><br>

	<b>・コンバージョン率の計算方法は？</b><br>
	⇒コンバージョン÷アクセス数=コンバージョン率<br><br>

	<b>・KPIとは？</b><br><br>

	<b>・離脱と直帰の違いは？</b><br><br>

	<b>・PVとセッションとUUの違いは？</b><br><br>

	<b>・PV？セッション？UUになる？</b>
  	</p>


  	<!--p>さて、いよいよWebアプリケーションを開発するためのフレームワーク、Ruby on Railsについての学習に入っていきます。</p><p>ここで意識しておきたい点としては、 <strong>Rails</strong> というのはRubyとはまったくの別物ということです。<br>たしかに、Rubyでできていることには違いありませんが、使う上での定義はまったく異なります。<br>Rubyはあくまでプログラミング言語、それだけではただの文字の集まりに過ぎません。<br>一方Railsは、それだけでWebアプリケーションを制作するために便利な機能がたくさん詰まった道具箱です。<br>例えば制作中のWebアプリケーションに「User認証機能を実装したい」などといった作り手のニーズにRailsは、快く自分の持つ機能を提供し、機能のほとんどをコードを書くことなく実装してくれます。</p><p>なので、Rubyという枠は取っ払って、<strong>Rails</strong> としての使い方を理解するようここでは意識していってください。</p><p>このセクションでは、ミニツイッターアプリケーション</strong>の制作を行いながら、実践形式でRailsの学習を進めていきます。<br>
  	これをプログラミング基礎編の最後の課題とし、終えるころにはプログラミングの基礎はもちろん、WebアプリケーションひいてはWebサービスがどのように出来上がっていくのかといった過程を学びつつ、実際に人に使ってもらえるアプリケーションをひとつ作り上げることができます。</p-->
  </div>