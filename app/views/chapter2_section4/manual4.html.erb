  <div class="span4">
    <%= render 'layouts/navbar2' %>
  </div>
  <div class="span8">
  	<h1 id="内部対策"><a name="内部対策" href="#内部対策"></a>内部対策</h1>

  	<hr class="page">

	<p>
	コードや文章を適切にしていく<br>
	キーワードを絞って、それに沿ったタイトルや見出しをつける<br>
	更に文章の内容もそのキーワードに沿ったものにすることで、<br>
	ページの評価が上がる<br><br>

	また、減点方式でもあるので<br>
	なるべくランクダウンに繋がることを抑える<br>
	・リンクエラーを減らす<br>
	・文章量<br>
	など	</p>

  	<!--p>さて、いよいよWebアプリケーションを開発するためのフレームワーク、Ruby on Railsについての学習に入っていきます。</p><p>ここで意識しておきたい点としては、 <strong>Rails</strong> というのはRubyとはまったくの別物ということです。<br>たしかに、Rubyでできていることには違いありませんが、使う上での定義はまったく異なります。<br>Rubyはあくまでプログラミング言語、それだけではただの文字の集まりに過ぎません。<br>一方Railsは、それだけでWebアプリケーションを制作するために便利な機能がたくさん詰まった道具箱です。<br>例えば制作中のWebアプリケーションに「User認証機能を実装したい」などといった作り手のニーズにRailsは、快く自分の持つ機能を提供し、機能のほとんどをコードを書くことなく実装してくれます。</p><p>なので、Rubyという枠は取っ払って、<strong>Rails</strong> としての使い方を理解するようここでは意識していってください。</p><p>このセクションでは、ミニツイッターアプリケーション</strong>の制作を行いながら、実践形式でRailsの学習を進めていきます。<br>
  	これをプログラミング基礎編の最後の課題とし、終えるころにはプログラミングの基礎はもちろん、WebアプリケーションひいてはWebサービスがどのように出来上がっていくのかといった過程を学びつつ、実際に人に使ってもらえるアプリケーションをひとつ作り上げることができます。</p-->
  </div>